{"version":3,"sources":["Navigation/Navigation.module.scss","WeddingInfo/WeddingInfo.module.scss","HomeView/HomeView.module.scss","Footer/Footer.module.scss","Splash/Splash.module.scss","Footer/Footer.js","Navigation/Navigation.js","Splash/Splash.js","WeddingInfo/WeddingInfo.js","HomeView/HomeView.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","className","styles","footer","Navigation","navigation","nowrap","menu","href","menuItem","Splash","splash","WeddingInfo","weddingInfo","title","countdown","date","renderer","props","days","events","event","HomeView","homeView","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,WAAa,+BAA+B,KAAO,yBAAyB,SAAW,6BAA6B,OAAS,6B,gBCA/ID,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,2BAA2B,UAAY,+BAA+B,OAAS,4BAA4B,MAAQ,6B,kBCA5LD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,KAAO,uBAAuB,YAAY,4BAA4B,OAAS,yBAAyB,KAAO,yB,gBCAvKD,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,OAAS,yB,6KCUZC,MAPf,WACE,OACE,yBAAKC,UAAWC,IAAOC,U,gBCuBZC,MA1Bf,WACE,OACE,yBAAKH,UAAWC,IAAOG,WAAa,SAClC,kEACA,4BACE,0BAAMJ,UAAWC,IAAOI,QAAxB,4BACA,0BAAML,UAAWC,IAAOI,QAAxB,iBAEF,yBAAKL,UAAWC,IAAOK,MAErB,uBAAGC,KAAK,IAAIP,UAAWC,IAAOO,UAA9B,SAIA,uBAAGD,KAAK,IAAIP,UAAWC,IAAOO,UAA9B,QAIA,uBAAGD,KAAK,IAAIP,UAAWC,IAAOO,UAA9B,c,gBCZOC,MANf,WACE,OACE,yBAAKT,UAAWC,IAAOS,U,uBC4BZC,MA7Bf,WACE,OACE,yBAAKX,UAAWC,IAAOW,YAAc,SACnC,wBAAIZ,UAAWC,IAAOY,OAAtB,eACA,yBAAKb,UAAWC,IAAOa,WAAvB,KACI,kBAAC,IAAD,CAAWC,KAAK,mBAAmBC,SAAU,SAAAC,GAAK,OAAIA,EAAMC,QAAS,IADzE,eAIA,yBAAKlB,UAAWC,IAAOkB,QACrB,yBAAKnB,UAAWC,IAAOmB,OACrB,mDACA,mCAEF,yBAAKpB,UAAWC,IAAOmB,OACrB,6CACA,6BACE,+CACA,wDAEE,6BAFF,2BCFGC,MAXf,WACE,OACE,yBAAKrB,UAAWC,IAAOqB,UACrB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,SD2HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.338b67ec.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"navigation\":\"Navigation_navigation__z7Rs0\",\"menu\":\"Navigation_menu__2cmH9\",\"menuItem\":\"Navigation_menuItem__192Wq\",\"nowrap\":\"Navigation_nowrap__3RupY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weddingInfo\":\"WeddingInfo_weddingInfo__Fd-Hp\",\"title\":\"WeddingInfo_title__1oPVw\",\"countdown\":\"WeddingInfo_countdown__32rW4\",\"events\":\"WeddingInfo_events__3mMhZ\",\"event\":\"WeddingInfo_event__BXflk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"homeView\":\"HomeView_homeView__3VmuV\",\"logo\":\"HomeView_logo__1-yl8\",\"logo-spin\":\"HomeView_logo-spin__2Eg_g\",\"header\":\"HomeView_header__3WAq3\",\"link\":\"HomeView_link__3zPwY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__1lA4x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"splash\":\"Splash_splash__2vQ4y\"};","import React from \"react\";\nimport styles from \"./Footer.module.scss\";\n\n\nfunction Footer() {\n  return (\n    <div className={styles.footer}>\n    </div>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport styles from \"./Navigation.module.scss\";\n\nfunction Navigation() {\n  return (\n    <div className={styles.navigation + \" card\"}>\n      <h1>Colm Gallagher & Katelyn Salvatore</h1>\n      <h3>\n        <span className={styles.nowrap}>September 26, 2020 |&nbsp;</span>\n        <span className={styles.nowrap}>Bluemont, VA</span>\n      </h3>\n      <div className={styles.menu}>\n        {/* eslint-disable-next-line */}\n        <a href=\"#\" className={styles.menuItem}>\n          About\n        </a>\n        {/* eslint-disable-next-line */}\n        <a href=\"#\" className={styles.menuItem}>\n          RSVP\n        </a>\n        {/* eslint-disable-next-line */}\n        <a href=\"#\" className={styles.menuItem}>\n          Contact\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Navigation;\n","import React from \"react\";\nimport styles from \"./Splash.module.scss\";\n\nfunction Splash() {\n  return (\n    <div className={styles.splash} />\n  );\n}\n\nexport default Splash;\n","import React from \"react\";\nimport styles from \"./WeddingInfo.module.scss\";\nimport Countdown from \"react-countdown-now\";\n\nfunction WeddingInfo() {\n  return (\n    <div className={styles.weddingInfo + ' card'}>\n      <h1 className={styles.title}>The Wedding</h1>\n      <div className={styles.countdown}>\n        ~ <Countdown date=\"Sat, 26 Sep 2020\" renderer={props => props.days} />{\" \"}\n        Days Away ~\n      </div>\n      <div className={styles.events}>\n        <div className={styles.event}>\n          <h2>The Rehersal Dinner</h2>\n          <p>TBD</p>\n        </div>\n        <div className={styles.event}>\n          <h2>The Reception</h2>\n          <div>\n            <p>Whitehall Estate</p>\n            <p>\n              18301 Whitehall Estate Ln,\n              <br />\n              Bluemont, VA 20135\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default WeddingInfo;\n","import React from \"react\";\nimport styles from \"./HomeView.module.scss\";\nimport Footer from \"../Footer/Footer\";\nimport Navigation from \"../Navigation/Navigation\";\nimport Splash from \"../Splash/Splash\";\nimport WeddingInfo from \"../WeddingInfo/WeddingInfo\";\n\n\nfunction HomeView() {\n  return (\n    <div className={styles.homeView}>\n      <Navigation />\n      <Splash />\n      <WeddingInfo />\n      <Footer />\n    </div>\n  );\n}\n\nexport default HomeView;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport HomeView from './HomeView/HomeView';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HomeView />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}